pipeline {
    agent any

    environment {
        BACKEND_IMAGE = "yourdockerhubusername/backend"
        FRONTEND_IMAGE = "yourdockerhubusername/frontend"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"  // Jenkins credential ID for Docker Hub
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner'  // Name of SonarQube Scanner tool as configured in Jenkins
        SONAR_PROJECT_KEY = "your-project-key"
        SONAR_HOST_URL = "http://your-sonarqube-server-url"
        SONAR_AUTH_TOKEN = credentials('sonar-auth-token')  // Jenkins credential ID for SonarQube token
    }

    stages {
        stage('Build Backend') {
            steps {
                script {
                    dir('backend') {
                        sh 'pip install -r dependencies.txt'
                        sh 'python manage.py collectstatic --noinput'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis on backend
                    withSonarQubeEnv('SonarQube') {  // 'SonarQube' is the name of the SonarQube server configuration in Jenkins
                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                           "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                           "-Dsonar.sources=./backend " +
                           "-Dsonar.host.url=${SONAR_HOST_URL} " +
                           "-Dsonar.login=${SONAR_AUTH_TOKEN}"
                    }
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    // Build backend Docker image
                    docker.build("${BACKEND_IMAGE}", "./backend")
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    // Build frontend Docker image
                    docker.build("${FRONTEND_IMAGE}", "./frontend")
                }
            }
        }

        stage('Push Backend Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image(BACKEND_IMAGE).push("latest")
                    }
                }
            }
        }

        stage('Push Frontend Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image(FRONTEND_IMAGE).push("latest")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up any dangling images and containers
                sh 'docker image prune -f'
            }
        }
    }
}
